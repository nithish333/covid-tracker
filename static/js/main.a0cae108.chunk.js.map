{"version":3,"sources":["components/Card/Card.jsx","components/Cards/Cards.jsx","components/Countries/Countries.jsx","components/SearchBar/SearchBar.jsx","components/util.js","components/Map/Map.jsx","components/Chart/Chart.jsx","components/ChartView/ChartView.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","value","heading","name","lastUpdate","className","start","end","duration","separator","Date","toDateString","Cards","confirmed","recovered","deaths","Countries","countries","handleCountryChange","onChange","map","country","index","key","SearchBar","caseTypeColors","cases","hex","multiplier","multplier","Map","center","zoom","casesType","TileLayer","url","attribution","data","Circle","countryInfo","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","Chart","charData","labels","datasets","label","backgroundColor","viewChartType","chartType","width","height","options","ChartView","handleChartChange","App","props","event","a","console","log","target","fetch","getCountryResponse","json","getCountryData","setState","mapCenter","lng","mapZoom","componentDidMount","state","newConfirmed","newRecovered","newDeaths","responseFromUrl","countriesResponse","countryData","this","textAlign","marginTop","borderTop","padding","fontSize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0cae108.chunk.js","sourcesContent":["import React from \"react\";\r\nimport CountUp from \"react-countup\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ value, heading, name, lastUpdate }) => {\r\n  return (\r\n    <div className={`${name} Card`}>\r\n      <p className=\"heading\">{heading}</p>\r\n\r\n      <p className=\"value\">\r\n        <b>\r\n          <CountUp start={0} end={value} duration={2} separator=\",\" />\r\n        </b>\r\n      </p>\r\n      <p className=\"lastupdate\">\r\n        Last updated:{new Date(lastUpdate).toDateString()}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Cards.css\";\r\nimport Card from \"../Card/Card\";\r\n\r\nconst Cards = ({ confirmed, recovered, deaths, lastUpdate }) => {\r\n  return (\r\n    <div className=\"Cards\">\r\n      <Card\r\n        value={confirmed}\r\n        heading=\"Total no of confirmed cases\"\r\n        name=\"confirmed\"\r\n        lastUpdate={lastUpdate}\r\n      />\r\n      <Card\r\n        value={recovered}\r\n        heading=\"Total no of recovered cases\"\r\n        name=\"recovered\"\r\n        lastUpdate={lastUpdate}\r\n      />\r\n      <Card\r\n        value={deaths}\r\n        heading=\"Total no of death cases\"\r\n        name=\"deaths\"\r\n        lastUpdate={lastUpdate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nimport \"./Countries.css\";\r\n\r\nconst Countries = ({ countries, handleCountryChange }) => {\r\n  return (\r\n    <select className=\"Countries\" onChange={handleCountryChange}>\r\n      <option value=\"Global\">Global</option>\r\n      {countries.map((country, index) => {\r\n        return (\r\n          <option value={country.country} key={index}>\r\n            {country.country}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\nimport Countries from \"../Countries/Countries\";\r\n\r\nconst SearchBar = ({ countries, handleCountryChange }) => {\r\n  return (\r\n    <div className=\"SearchBar\">\r\n      <Countries\r\n        countries={countries}\r\n        handleCountryChange={handleCountryChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n\r\n// constructor(props) {\r\n//   super(props);\r\n//   this.state = {\r\n//     countries: [],\r\n//   };\r\n// }\r\n// async componentDidMount() {\r\n//   try {\r\n//     const countriesResponse = await fetch(\r\n//       \"https://api.covid19api.com/summary \"\r\n//     );\r\n//     const countriesArray = await countriesResponse.json();\r\n//     // console.log(countriesArray.Countries);\r\n//     const countries = countriesArray.Countries.map(\r\n//       (country) => country.Country\r\n//     );\r\n//     // console.log(countries);\r\n//     this.setState({\r\n//       countries: countries,\r\n//     });\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// }\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst caseTypeColors = {\r\n  cases: {\r\n    hex: \"#cc1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country, index) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={caseTypeColors[casesType].hex}\r\n      fillColor={caseTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * caseTypeColors[casesType].multiplier\r\n      }\r\n      key={index}\r\n    >\r\n      <Popup>\r\n        <div className=\"popup-container\">\r\n          <div\r\n            className=\"popup-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"popup-country\">\r\n            <b>{country.country}</b>\r\n          </div>\r\n          <div className=\"popup-cases\">\r\n            Cases : {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"popup-recovered\">\r\n            Recovered : {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"popup-deaths\">\r\n            Deaths : {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"../util\";\r\n\r\nconst Map = ({ center, zoom, countries, casesType }) => {\r\n  return (\r\n    <div className=\"Map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Chart.css\";\r\nimport { Bar, Doughnut, Line, Radar, Polar } from \"react-chartjs-2\";\r\n\r\nconst Chart = ({ confirmed, recovered, deaths, chartType }) => {\r\n  const charData = {\r\n    labels: [\"Confirmed\", \"Recovered\", \"Deaths\"],\r\n    datasets: [\r\n      {\r\n        label: \"Total no of covid cases \",\r\n        data: [confirmed, recovered, deaths],\r\n        backgroundColor: [\"#0a7ea2\", \"#60bea0\", \"#db565d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const viewChartType = chartType;\r\n  if (viewChartType === \"Bar\")\r\n    return <Bar data={charData} width={70} height={30} options={{}} />;\r\n  else if (viewChartType === \"Doughnut\")\r\n    return <Doughnut data={charData} width={70} height={30} options={{}} />;\r\n  else if (viewChartType === \"Line\")\r\n    return <Line data={charData} width={60} height={20} options={{}} />;\r\n  else if (viewChartType === \"Polar\")\r\n    return <Polar data={charData} width={70} height={30} options={{}} />;\r\n  else if (viewChartType === \"Radar\")\r\n    return <Radar data={charData} width={70} height={30} options={{}} />;\r\n  return <div className=\"Chart\">{viewChartType}</div>;\r\n};\r\n\r\nexport default Chart;\r\n\r\n/* \r\n<Bar data={charData} width={70} height={40} options={{}} /> */\r\n","import React from \"react\";\r\nimport \"./ChartView.css\";\r\n\r\nconst ChartView = ({ handleChartChange }) => {\r\n  return (\r\n    <div className=\"ChartView\">\r\n      <h3 className=\"chartHeading\">Graph view</h3>\r\n      <select className=\"charts\" onChange={handleChartChange}>\r\n        <option value=\"Bar\">Select chart type</option>\r\n        <option value=\"Bar\">Bar</option>\r\n        <option value=\"Line\">Line</option>\r\n        <option value=\"Doughnut\">Doughnut</option>\r\n        <option value=\"Polar\">Polar</option>\r\n        <option value=\"Radar\">Radar</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\nexport default ChartView;\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Cards from \"./components/Cards/Cards\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport Map from \"./components/Map/Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport Chart from \"./components/Chart/Chart\";\nimport ChartView from \"./components/ChartView/ChartView\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmed: 0,\n      recovered: 0,\n      deaths: 0,\n      newConfirmed: 0,\n      newRecovered: 0,\n      newDeaths: 0,\n      lastUpdate: \"\",\n      mapCenter: {\n        lat: 34.80476,\n        lng: -40.4796,\n      },\n      mapZoom: 3,\n      countries: [],\n      chartType: \"Bar\",\n    };\n  }\n  async componentDidMount() {\n    try {\n      const responseFromUrl = await fetch(\"https://disease.sh/v3/covid-19/all\");\n      const data = await responseFromUrl.json();\n      // console.log(data);\n      const countriesResponse = await fetch(\n        \"https://disease.sh/v3/covid-19/countries\"\n      );\n      const countryData = await countriesResponse.json();\n      // console.log(countryData);\n      // console.log(countries);\n\n      const confirmed = data.cases;\n      const recovered = data.recovered;\n      const deaths = data.deaths;\n      const lastUpdate = new Date();\n      this.setState({\n        confirmed,\n        recovered,\n        deaths,\n        lastUpdate,\n        mapCenter: {\n          lat: 34.80476,\n          lng: -40.4796,\n        },\n        mapZoom: 3,\n        countries: countryData,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //? Handle country change\n\n  handleCountryChange = async (event) => {\n    console.log(event.target.value);\n    if (event.target.value !== \"Global\") {\n      const getCountryResponse = await fetch(\n        `https://disease.sh/v3/covid-19/countries/${event.target.value}\n        `\n      );\n      const getCountryData = await getCountryResponse.json();\n      // console.log(getCountryData);\n      const confirmed = getCountryData.cases;\n      const recovered = getCountryData.recovered;\n      const deaths = getCountryData.deaths;\n      this.setState({\n        confirmed,\n        recovered,\n        deaths,\n        mapCenter: {\n          lat: getCountryData.countryInfo.lat,\n          lng: getCountryData.countryInfo.long,\n        },\n        mapZoom: 5,\n      });\n    } else {\n      this.componentDidMount();\n    }\n  };\n\n  //? Handle chart change\n\n  handleChartChange = (event) => {\n    this.setState({\n      chartType: event.target.value,\n    });\n  };\n  render() {\n    const {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n      countries,\n      chartType,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <h2 className=\"Heading\">covid-19 tracker</h2>\n\n        <SearchBar\n          handleCountryChange={(event) => this.handleCountryChange(event)}\n          countries={countries}\n        />\n        <Cards\n          confirmed={confirmed}\n          recovered={recovered}\n          deaths={deaths}\n          lastUpdate={lastUpdate}\n        />\n        <Map\n          center={this.state.mapCenter}\n          zoom={this.state.mapZoom}\n          countries={countries}\n        />\n        <p className=\"more\">\n          (Click on the circles to know more about the country.)\n        </p>\n        <ChartView\n          handleChartChange={(event) => this.handleChartChange(event)}\n        />\n        <Chart\n          confirmed={confirmed}\n          recovered={recovered}\n          deaths={deaths}\n          chartType={chartType}\n        />\n        <p\n          className=\"footer\"\n          style={{\n            textAlign: \"center\",\n            width: \"100%\",\n            marginTop: \"50px\",\n            borderTop: \"1px solid #f3f3f3\",\n            padding: \"20px\",\n            fontSize: \"25px\",\n          }}\n        >\n          Created by <b>Nithish Kommineni</b>\n        </p>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}